#include<sycl/sycl.hpp>
using namespace sycl;
int main()
{
queue q1;
auto a = malloc_shared<long long>(100,q1);
auto b = malloc_shared<long long>(200,q1);
auto c = malloc_shared<long long>(200,q1);
q1.parallel_for(range<2>(10,20), [=] (id<2> idx) {
int i = idx[0] * 1 + 1;
int j = idx[1] * 1 + 1;
b[((i-1)*20+j-1)] = (i+j);
c[((j-1)*10+i-1)] = (i*j);
}).wait();
q1.parallel_for(range<2>(10,10), [=] (id<2> idx) {
int i = idx[0] * 1 + 1;
int j = idx[1] * 1 + 1;
a[((i-1)*10+j-1)] = 0;
}).wait();
long long j;
j = 1;
while(j<=20){

q1.parallel_for(range<2>(10,10), [=] (id<2> idx) {
int i = idx[0] * 1 + 1;
int k = idx[1] * 1 + 1;
a[((i-1)*10+k-1)] = (a[((i-1)*10+k-1)]+b[((i-1)*20+j-1)]*c[((j-1)*10+k-1)]);
}).wait();
j = (j+1);
}
}



#include <sycl/sycl.hpp>
#include<ctime>
using namespace sycl;
int main()
{
int width = 10;
int length = 20;
queue q1;
auto a = malloc_shared<long long>(width*width,q1);
auto b = malloc_shared<long long>(width*length,q1);
auto c = malloc_shared<long long>(width*length,q1);
q1.parallel_for(range<2>(width,length), [=] (id<2> idx) {
int i = idx[0] * 1 + 1;
int j = idx[1] * 1 + 1;
b[((i-1)*length+j-1)] = (i+j);
c[((j-1)*width+i-1)] = (i*j);
}).wait();
q1.parallel_for(range<2>(width,width), [=] (id<2> idx) {
int i = idx[0] * 1 + 1;
int j = idx[1] * 1 + 1;
a[((i-1)*width+j-1)] = 0;
}).wait();
long long j;
j = 1;
std::clock_t start1 = std::clock();
while(j<=length){
queue q1;
q1.parallel_for(range<2>(width,width), [=] (id<2> idx) {
int i = idx[0] * 1 + 1;
int k = idx[1] * 1 + 1;
a[((i-1)*width+k-1)] = (a[((i-1)*width+k-1)]+b[((i-1)*length+j-1)]*c[((j-1)*width+k-1)]);
}).wait();
j = (j+1);
}
    std::clock_t end1 = std::clock();
auto d = malloc_shared<long long>(width*width,q1);
    for(int i=0;i!=width*width;i++)
    d[i] = 0;
    std::clock_t start2 = std::clock();
for (int i=0;i!=width;i++)
{
    for(int j=0;j!=length;j++)
    {
        for(int k = 0;k!=width;k++)
        {
            d[i*width+k] += b[i*length+j]*c[j*width+k];
        }
    }
}
    std::clock_t end2 = std::clock();
    for(int i=0;i!=width*width;i++)
    {
        if(a[i]-d[i])
        std::cout<<a[i]-d[i]<<std::endl;
    }
    
    std::cout<<"speed: "<<end2-start1<<" "<<end1-start1<<" "<<(start2-end2)/(start1-end1)<<std::endl;
}
